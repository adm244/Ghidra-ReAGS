# sleigh specification file for AGSVM

# KNOWN ISSUES (28.03.23):
#   FIXME(adm244): stack analysis fails to get proper stack frame size
#       if local variables allocated/addressed with MAR register (pointing to SP)
#
#   FIXME(adm244): sometimes decompiler fails to recognize while-loop and outputs do-while (and goto's).
#       I think it has something to do with memread, memwrite instructions and SP pointer;
#       probably related to previous problem...
#       (mmm3:GlobalScript.scom3:GetLucasSavegameListBox$2)
#

# FIXME(adm244): there are bugged behaviors with certain instructions
# make sure to understand how they supposed to work and implement them as such.

# FIXME(adm244): there's a problem with an unaligned stack variables
# see "tboxComputer_OnActivate$1" for example

# FIXME(adm244): goto appears in "dock_is_possible$0", also CONCAT22(..)

@define BYTE "1"
@define WORD "2"
@define DWORD "4"

@define SIZE "4"

@define CPOOL_DATA "1"
@define CPOOL_FUNCTION "2"
@define CPOOL_STRING "3"
@define CPOOL_IMPORT_DATA "4"
@define CPOOL_IMPORT_FUNCTION "5"
@define CPOOL_NEW_ARRAY "6"
@define CPOOL_DATAPOINTER "7"

define endian=little;

define alignment=4;

define space ram type=ram_space size=$(SIZE) default;
define space register type=register_space size=$(SIZE);
define space farSpace type=ram_space size=$(SIZE);
define space paramStack type=ram_space size=$(SIZE);

# general purpose registers
define register offset=0x00 size=$(SIZE) [ ax         bx         cx         dx         ];
#define register offset=0x00 size=$(WORD) [ ax.w   _   bx.w   _   cx.w   _   dx.w   _   ];
#define register offset=0x00 size=$(BYTE) [ ax.b _ _ _ bx.b _ _ _ cx.b _ _ _ dx.b _ _ _ ];
# special meaning registers
define register offset=0x14 size=$(SIZE) [ sp op mar ];
# utility registers not present in virtual machine
define register offset=0x20 size=$(SIZE) [ pc _farsp ];

# operations used for p-code injection
define pcodeop memcpyCallOther;
define pcodeop movlitCallOther;
define pcodeop farcallCallOther;
define pcodeop memzeroCallOther;

#TOKENS
define token operation (32)
    opcode   = ( 0,23)
    instance = (24,31)
;

#    ctx_reg = (0, 2)
define token operand (32)
    reg1   = (0, 2)
    reg2   = (0, 2)
    reg1.b = (0, 2)
    reg2.b = (0, 2)
    reg1.w = (0, 2)
    reg2.w = (0, 2)
    arg1   = (0,31) signed
    arg2   = (0,31) signed
    arg3   = (0,31) signed
;

# TODO(adm244): investigate if sub-pieces of special registers can also be used
attach variables [ reg1   reg2   ] [ _ sp mar ax   bx   cx   op dx   ];

#attach variables [ reg1.b reg2.b ] [ _ _  _   ax.b bx.b cx.b _  dx.b ];
#attach variables [ reg1.w reg2.w ] [ _ _  _   ax.w bx.w cx.w _  dx.w ];
# MARCO
macro push(x) {
    *:$(SIZE) sp = x;
    sp = sp + $(SIZE);
}

macro pop(x) {
    sp = sp - $(SIZE);
    x = *:$(SIZE) sp;
}

macro farpush(x) {
    *[farSpace]:$(SIZE) _farsp = x;
    _farsp = _farsp + $(SIZE);
}

macro farsubsp(x) {
    _farsp = _farsp - (x * $(SIZE));
}

# Constructors
dest: rel  is arg1 [ rel = inst_next + (arg1 * $(SIZE)); ] {
    export *:$(SIZE) rel;
}

# Instructions
# add (imm)
:add reg1, arg2        is opcode=0x01; reg1; arg2 {
    reg1 = reg1 + arg2;
}

# sub (imm)
:sub reg1, arg2        is opcode=0x02; reg1; arg2 {
    reg1 = reg1 - arg2;
}

# regtoreg
:mov reg2, reg1        is opcode=0x03; reg1; reg2 {
    reg2 = reg1;
}

# writelit
:memcpy arg2, arg1     is opcode=0x04; arg1; arg2 {
    memcpyCallOther(arg2:$(SIZE), arg1:$(SIZE));
}

# ret
:ret                   is opcode=0x05 {
    pop(pc);
    return [pc];
}

# littoreg
:mov reg1, arg2        is opcode=0x06; reg1; arg2 {
    reg1 = movlitCallOther(arg2:$(SIZE));
}

# memread
:memread4 reg1         is opcode=0x07; reg1 {
    reg1 = *:$(SIZE) mar;
}

# memwrite
:memwrite4 reg1        is opcode=0x08; reg1 {
    *:$(SIZE) mar = reg1;
}

# mulreg
:mul reg1, reg2        is opcode=0x09; reg1; reg2 {
    reg1 = reg1 * reg2;
}

# divreg
:div reg1, reg2        is opcode=0x0a; reg1; reg2 {
    reg1 = reg1 s/ reg2;
}

# addreg
:add reg1, reg2        is opcode=0x0b; reg1; reg2 {
    reg1 = reg1 + reg2;
}

# subreg
:sub reg1, reg2        is opcode=0x0c; reg1; reg2 {
    reg1 = reg1 - reg2;
}

# bitand
:and reg1, reg2        is opcode=0xd; reg1; reg2 {
    reg1 = reg1 & reg2;
}

# bitor
:or reg1, reg2         is opcode=0xe; reg1; reg2 {
    reg1 = reg1 | reg2;
}

# isequal
:cmpeq reg1, reg2      is opcode=0x0f; reg1; reg2 {
    reg1 = sext(reg1 == reg2);
}

# notequal
:cmpneq reg1, reg2     is opcode=0x10; reg1; reg2 {
    reg1 = sext(reg1 != reg2);
}

# greater
:cmpgt reg1, reg2      is opcode=0x11; reg1; reg2 {
    reg1 = sext(reg1 s> reg2);
}

# lessthan
:cmplt reg1, reg2      is opcode=0x12; reg1; reg2 {
    reg1 = sext(reg1 s< reg2);
}

# gte
:cmpge reg1, reg2      is opcode=0x13; reg1; reg2 {
    reg1 = sext(reg1 s>= reg2);
}

# lte
:cmple reg1, reg2      is opcode=0x14; reg1 & reg1.b; reg2 {
    reg1 = sext(reg1 s<= reg2);
}

# and (logical)
:land reg1, reg2       is opcode=0x15; reg1; reg2 {
    reg1 = sext(reg1 != 0 && reg2 != 0);
}

# or (logical)
:lor reg1, reg2        is opcode=0x16; reg1; reg2 {
    reg1 = sext(reg1 != 0 || reg2 != 0);
}

# call
:call reg1             is opcode=0x17; reg1 {
    push(&:$(SIZE) inst_next);
    call [reg1];
}

# memreadb
:memread1 reg1         is opcode=0x18; reg1 {
#    reg1.b = *:$(BYTE) mar;
#    reg1 = sext(reg1.b);
    reg1 = zext(*:$(BYTE) mar);
}

# memreadw
:memread2 reg1         is opcode=0x19; reg1 {
#    reg1.w = *:$(WORD) mar;
#    reg1 = sext(reg1.w);
    reg1 = zext(*:$(WORD) mar);
}

# memwriteb
:memwrite1 reg1        is opcode=0x1a; reg1 {
    *:$(BYTE) mar = reg1:1;
}

# memwritew
:memwrite2 reg1        is opcode=0x1b; reg1 {
    *:$(WORD) mar = reg1:2;
}

# jz
:jz dest               is opcode=0x1c; dest {
    if (ax == 0) goto dest;
}

# pushreg
:push reg1             is opcode=0x1d; reg1 {
    push(reg1);
}

# popreg
:pop reg1              is opcode=0x1e; reg1 {
    pop(reg1);
}

# jmp
:jmp dest              is opcode=0x1f; dest {
    goto dest;
}

# mul (imm)
:mul reg1, arg2        is opcode=0x20; reg1; arg2 {
    reg1 = reg1 * arg2;
}

# callext
:farcall reg1          is opcode=0x21; reg1 {
    farcallCallOther(reg1);
}

# pushreal
:farpush reg1          is opcode=0x22; reg1 {
    farpush(reg1);
}

# subrealstack
:farsubsp arg1         is opcode=0x23; arg1 {
    farsubsp(arg1);
}

# linenum
:sourceline arg1       is opcode=0x24; arg1 {
#    NOP
}

# callas
:callscr arg1          is opcode=0x25; arg1 {
#    NOTE(adm244): this instruction is not emitted by the compiler,
#    it's used as a replacement of "farcall" instruction at runtime.
#    BTW, its implementation assumes that "farcall" follows directly
#    after "movlit" instruction, so if you emit some code in-between
#    AGS runtime fails to replace the instruction.
}

# thisbase
:thisaddr              is opcode=0x26; arg1 {
#    TODO(adm244): research this
}

# numfuncargs
:setfuncargs arg1      is opcode=0x27; arg1 {
#    NOP
}

# modreg
:mod reg1, reg2        is opcode=0x28; reg1; reg2 {
    reg1 = reg1 s% reg2;
}

# xorreg
:xor reg1, reg2        is opcode=0x29; reg1; reg2 {
    reg1 = reg1 ^ reg2;
}

# notreg
:lnot reg1             is opcode=0x2a; reg1 {
    if (reg1 == 0) goto <true>;

    reg1 = 0;
    goto inst_next;

    <true>
    reg1 = 1;
}

# shiftleft
:shl reg1, reg2        is opcode=0x2b; reg1; reg2 {
    reg1 = reg1 << reg2;
}

# shiftright
:shr reg1, reg2        is opcode=0x2c; reg1; reg2 {
    reg1 = reg1 >> reg2;
}

# callobj
:initobj reg1          is opcode=0x2d; reg1 {
    op = reg1;
}

# checkbounds
:assertlte reg1, arg2  is opcode=0x2e; reg1; arg2 {
    # NOP
}

# memwriteptr
:memwrite.ptr reg1     is opcode=0x2f; reg1 {
    *:$(SIZE) mar = reg1;
}

# memreadptr
:memread.ptr reg1      is opcode=0x30; reg1 {
    reg1 = *:$(SIZE) mar;
}

# memzeroptr
:memzero.ptr           is opcode=0x31 {
    *:$(SIZE) mar = 0;
}

# meminit
:meminit.ptr reg1      is opcode=0x32; reg1 {
    *:$(SIZE) mar = reg1;
}

# loadspoffs
:stackptr arg1         is opcode=0x33; arg1 {
    mar = sp - arg1;
}

# checknull
:assert mar            is opcode=0x34 & mar {
#    NOP
}

# fadd
:fadd reg1, arg2       is opcode=0x35; reg1; arg2 {
    reg1 = reg1 f+ arg2;
}

# fsub
:fsub reg1, arg2       is opcode=0x36; reg1; arg2 {
    reg1 = reg1 f- arg2;
}

# fmulreg
:fmul reg1, reg2       is opcode=0x37; reg1; reg2 {
    reg1 = reg1 f* reg2;
}

# fdivreg
:fdiv reg1, reg2       is opcode=0x38; reg1; reg2 {
    reg1 = reg1 f/ reg2;
}

# faddreg
:fadd reg1, reg2       is opcode=0x39; reg1; reg2 {
    reg1 = reg1 f+ reg2;
}

# fsubreg
:fsub reg1, reg2       is opcode=0x3a; reg1; reg2 {
    reg1 = reg1 f- reg2;
}

# fgreater
:fcmpgt reg1, reg2     is opcode=0x3b; reg1; reg2 {
    reg1 = zext(reg1 f> reg2);
}

# flessthan
:fcmplt reg1, reg2     is opcode=0x3c; reg1; reg2 {
    reg1 = zext(reg1 f< reg2);
}

# fgte
:fcmpge reg1, reg2     is opcode=0x3d; reg1; reg2 {
    reg1 = zext(reg1 f>= reg2);
}

# flte
:fcmple reg1, reg2     is opcode=0x3e; reg1; reg2 {
    reg1 = zext(reg1 f<= reg2);
}

# zeromemory
:memzero arg1          is opcode=0x3f; arg1 {
    memzeroCallOther(arg1:$(SIZE));
}

# createstring
:strnew reg1           is opcode=0x40; reg1 {
#    NOP
}

# stringsequal
:streq reg1, reg2      is opcode=0x41; reg1; reg2 {
#    NOTE(adm244): this produces INT_EQUAL pcode which yields correct decompilation
#    _BUT_ will give incorrect results when attempting emulation (BEWARE)
    if (reg1 == reg2) goto <true>;

    reg1 = 0;
    goto inst_next;

    <true>
    reg1 = 1;
}

# stringsnoteq
:strneq reg1, reg2     is opcode=0x42; reg1; reg2 {
#    NOTE(adm244): see "streq" instruction note
    if (reg1 != reg2) goto <true>;

    reg1 = 0;
    goto inst_next;

    <true>
    reg1 = 1;
}

# checknullreg
:assert reg1           is opcode=0x43; reg1 {
#    NOP
}

# loopcheckoff
:loopcheckoff          is opcode=0x44 {
#    NOP
}

# memzeroptrnd
:memzerond.ptr         is opcode=0x45 {
    *:$(SIZE) mar = 0;
}

# jnz
:jnz dest              is opcode=0x46; dest {
    if (ax != 0) goto dest;
}

# dynamicbounds
:dynamicbounds reg1    is opcode=0x47; reg1 {
#    NOP
}

# newarray
:arrnew reg1, arg2, arg3  is opcode=0x48; reg1; arg2; arg3 {
#    reg1 = count; arg2 = size; arg3 = isManaged
#    FIXME(adm244): cannot make it to display correct data type name;
#    decompiler takes data type from newobject destination varnode (reg1 in this case)
    local tmp = cpool(0:4, arg2, $(CPOOL_NEW_ARRAY), arg3);
    reg1 = newobject(tmp, reg1);
}

# newuserobject
:objnew reg1, arg2     is opcode=0x49; reg1; arg2 {
    reg1 = newobject(reg1, arg2:$(SIZE));
}
